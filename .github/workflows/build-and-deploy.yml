# This workflow trigger on push to any branch
name: CI / CD
on:
    push:
        paths-ignore:
            - '**.md'
            - '.gitignore'
            - 'LICENCE'
            - 'CODEOWNERS'
        branches:
    repository_dispatch:
      types: [publish-dev-sbs, publish-prod-sbs]

env:
  BASE_IMAGE: docker.pkg.github.com/${{ github.repository }}/sykdom-i-familien
  GITHUB_USERNAME: x-access-token
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
    test:
        name: Test Code
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [8.x]
        steps:
            - run: echo "${{toJSON(github.event)}}"
            - uses: actions/checkout@v1
            - name: Cache NPM dependencies
              uses: actions/cache@v1
              with:
                path: node_modules
                key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
                restore-keys: |
                  ${{ runner.OS }}-npm-cache-
                  - name: Use Node.js ${{ matrix.node-version }}
                    uses: actions/setup-node@v1
                    with:
                        node-version: ${{ matrix.node-version }}
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}
            - name: npm install, build, and test
              run: |
                  npm ci
                  npm run test

    set-image:
      name: "Set image"
      needs: test
      runs-on: ubuntu-latest
      outputs:
        image: ${{ steps.output-image.outputs.image }}
      steps:
      - id: checkout-code
        uses: actions/checkout@v1
      - id: set-image
        run: echo "::set-env name=TAG::$(date "+%Y.%m.%d.%H.%M")-$(git rev-parse --short HEAD)"
      - id: output-image
        run: echo "::set-output name=image::${BASE_IMAGE}:${TAG}"
      - id: debug
        run: echo "${BASE_IMAGE}:${TAG}"

    build-code-and-push-docker-dev:
        name: staging-build-push-docker
        if: github.event.event_type == 'publish-dev-sbs' # Build and push docker if publish staging event from sanity studio
        needs: set-image
        runs-on: ubuntu-latest
        env:
          IMAGE: ${{ needs.set-image.outputs.image }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v1
            - name: build code
              env:
                  SANITY_TOKEN: ${{ secrets.SANITY_TOKEN }}
                  DATASET: production
                  ENV: dev
                  OVERLAY_DRAFTS: true
                  WATCH_MODE: true
              run: |
                  echo "Exported DATASET=$DATASET"
                  npm i
                  npm run build
            - name: Build Docker image
              run: |
                  docker build -t ${IMAGE} . -f Dockerfile-dev
            - name: Login to Github Package Registry
              env:
                  DOCKER_USERNAME: x-access-token
                  DOCKER_PASSWORD: ${{ env.GITHUB_TOKEN }}
              run: |
                  echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin docker.pkg.github.com
            - name: Push Docker image
              run: 'docker push ${IMAGE}'

    build-code-and-push-docker-prod:
        name: prod-build-push-docker
        if: github.event.event_type == 'publish-prod-sbs' # Build and push docker if publish production event from sanity studio
        needs: set-image
        runs-on: ubuntu-latest
        env:
          IMAGE: ${{ needs.set-image.outputs.image }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v1
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}
            - name: build code
              env:
                  SANITY_TOKEN: ${{ secrets.SANITY_TOKEN }}
                  DATASET: production
                  ENV: prod
                  OVERLAY_DRAFTS: false
                  WATCH_MODE: false
              run: |
                  echo "Exported DATASET=$DATASET"
                  npm i
                  npm run build
            - name: Build Docker image
              run: |
                  docker build -t ${IMAGE} .
            - name: Login to Github Package Registry
              env:
                  DOCKER_USERNAME: x-access-token
                  DOCKER_PASSWORD: ${{ env.GITHUB_TOKEN }}
              run: |
                  echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin docker.pkg.github.com
            - name: Push Docker image
              run: 'docker push ${IMAGE}'

    deploy-dev-sbs:
        name: deploy-dev-sbs
        needs: [build-code-and-push-docker-dev, set-image] # Depends on build-code-and-push-docker job
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v1
            - name: deploy to dev-sbs
              uses: nais/deploy/actions/deploy@v1
              env:
                IMAGE: ${{ needs.set-image.outputs.image }}
                APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
                CLUSTER: dev-sbs
                RESOURCE: nais/dev-sbs.yml

    deploy-prod-sbs:
        name: deploy-prod-sbs
        needs: [build-code-and-push-docker-prod, set-image] # Depends on build-code-and-push-docker job
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v1
            - name: export image
              run: |
                echo "::set-env name=IMAGE::${{ needs.set-image.outputs.image }}"
            - name: deploy to prod-sbs
              uses: nais/deploy/actions/deploy@v1
              env:
                IMAGE: ${{ needs.set-image.outputs.image }}
                APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
                CLUSTER: prod-sbs
                RESOURCE: nais/prod-sbs.yml
